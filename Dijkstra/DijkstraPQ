
import java.io.*;
import java.util.*;

public class DijkstraPQ {
	/**
	 * Implement Dijksta's algorithm for computing a shortest path from a designated
	 * vertex (A) to a designated vertex (B) in a directed graph. Implementation uses
	 * a minimum heap as a supporting data structure. 
	 * 
	 * Program reads graph from a text file. Each input file starts with a line containing
	 * the number of vertices in the graph. The vertices are assumed to be numbered 
	 * alphabetically starting with vertex A. Each subsequent line in the input file
	 * contains the tail of an edge followed by a space, the head of the edge followed by
	 * a space, and the weight of the edge, respectively.
	 * 
	 * Program outputs the weight of the shortest path from vertex A to vertex B in the
	 * graph and the sequence of vertices on a shortest path from A to B. 
	 */
		
	private static Map<String, Integer> dist;
	private static Map<String, String> prev;
	private static PriorityQueue<Node> pq;
	private static Map<String, Map<String, Node>> adj;
	private static int V;

	//Function for Dijkstra's Algorithm
	public static void dijkstra() {
		
		//For every vertex, add distance value
		for (Map.Entry<String, Integer> entry : dist.entrySet()) {
			pq.add(new Node(entry.getKey(), entry.getValue()));
		}
		
		while (!pq.isEmpty()) {
			
			String u = pq.remove().vertex;
			
			if (adj.containsKey(u)) {
				
				//Iterate through correct adjacency list
				for (Node name : adj.get(u).values()) {
				
					//Update distance values
					if (dist.get(name.vertex) > dist.get(u) + name.dist) {
						pq.remove(name);
						dist.put(name.vertex, dist.get(u) + name.dist);
						prev.put(name.vertex, u);
						pq.add(new Node(name.vertex, dist.put(name.vertex, dist.get(u) + name.dist)));
				
					}		
				}
			}
		}	
	}
	
	
	
	public static void readFile() throws FileNotFoundException {
		
		//Read text file input by user
		Scanner userInput = new Scanner(System.in);
		System.out.println("Enter name of input file: ");
		String file = userInput.next();	
		Scanner inputFile1 = new Scanner(new File(file));
						
		V = inputFile1.nextInt();
				
		//Create adjacency list of nodes
		//Initialize prev and dist maps
		adj = new HashMap<String, Map<String, Node>>();
		pq = new PriorityQueue<Node>(V);
		dist = new HashMap<String, Integer>();
		prev = new HashMap<String, String>();
		
		String z = "A";
		adj.put("A", new HashMap<String, Node>());
		dist.put("A", 0);
		while (inputFile1.hasNextLine()) {
			String a = inputFile1.next();
			String b = inputFile1.next();
			int c = inputFile1.nextInt();
			if (a.equals(z)) {
				adj.get(z).put(b, new Node(b, c));				
			}
			else {
				z = a;
				adj.put(z, new HashMap<String, Node>());
				adj.get(z).put(b, new Node(b, c));
			}
			if (!dist.containsKey(a)) dist.put(a, Integer.MAX_VALUE);
			if (!dist.containsKey(b)) dist.put(b, Integer.MAX_VALUE);
			if (!prev.containsKey(a)) prev.put(a, null);
			if (!prev.containsKey(b)) prev.put(b, null);
		}	
		adj.put("B", new HashMap<String, Node>());
											
		userInput.close();
		inputFile1.close();
	}		

	
	
	public static void main(String[] args) throws FileNotFoundException {
		
		readFile();
		dijkstra();
		
		System.out.println(dist.get("B"));
		String key = "B";
		String Order = "B";
		while (!key.equals("A")) {
			key = prev.get(key);
			Order = key + " " + Order;
		}
		System.out.println(Order);
	}
}

//Create node class
class Node implements Comparable<Node> {
	
	public String vertex;
	public int dist;
	
	public Node() {
	}
	
	public String toString() {
		return this.vertex + this.dist;
	}
		
	public Node(String vertex, int dist) {
		this.vertex = vertex;
		this.dist = dist;
	}
	
	public int compareTo(Node n) {
		if (this.dist < n.dist) return -1;
		if (this.dist > n.dist) return 1;
		return 0;
	}
	
}

